Traceback (most recent call last):
  File "C:\Users\jqbond\AppData\Roaming\Python\Python39\site-packages\jupyter_cache\executors\utils.py", line 51, in single_nb_execution
    executenb(
  File "C:\Users\jqbond\AppData\Roaming\Python\Python39\site-packages\nbclient\client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "C:\Users\jqbond\AppData\Roaming\Python\Python39\site-packages\nbclient\util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "C:\Users\jqbond\AppData\Roaming\Python\Python39\site-packages\nbclient\util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "C:\Users\jqbond\anaconda3\lib\asyncio\base_events.py", line 647, in run_until_complete
    return future.result()
  File "C:\Users\jqbond\AppData\Roaming\Python\Python39\site-packages\nbclient\client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "C:\Users\jqbond\AppData\Roaming\Python\Python39\site-packages\nbclient\client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "C:\Users\jqbond\AppData\Roaming\Python\Python39\site-packages\nbclient\client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
#Run Optimization
ans_two = opt.minimize_scalar(OBJTWO)#, method = 'Brent', bracket = [0.01, 10])
SSE     = ans_two.fun
k_two   = ans_two.x
print(k_two, SSE)

#Overlay best fit model with data
plt.figure(1, figsize = (5, 5))
plt.scatter(tdata, CAdata, edgecolor = 'black', color = 'none', label = 'CA')
plt.plot(tsmooth, CMODTWO, color = 'black', linestyle = 'dashed', label = 'Second Order Model')
plt.xlabel('time (min)', fontsize = 12)
plt.ylabel('CA (M)', fontsize = 12)
plt.xlim(0, 120)
plt.ylim(0, 12)
plt.legend()
plt.show()

#Overlay best fit model with data
plt.figure(2, figsize = (5, 5))
plt.scatter(tdata, (CAdata - CATWO(k_one, tdata))/CAdata, edgecolor = 'black', color = 'none', label = 'Residual Error')
plt.hlines(0, 0, 120, color = 'black', linestyle = 'dashed', label = 'Zero Error')
plt.xlabel('time (min)', fontsize = 12)
plt.ylabel('Error (mol/L)', fontsize = 12)
plt.xlim(0, 120)
plt.ylim(-10, 10)
plt.legend(loc = 'lower left')
plt.show()
------------------

[1;31m---------------------------------------------------------------------------[0m
[1;31mValueError[0m                                Traceback (most recent call last)
[1;32m~\AppData\Local\Temp\ipykernel_5188\3352724010.py[0m in [0;36m<cell line: 10>[1;34m()[0m
[0;32m      8[0m [0mplt[0m[1;33m.[0m[0mfigure[0m[1;33m([0m[1;36m1[0m[1;33m,[0m [0mfigsize[0m [1;33m=[0m [1;33m([0m[1;36m5[0m[1;33m,[0m [1;36m5[0m[1;33m)[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0;32m      9[0m [0mplt[0m[1;33m.[0m[0mscatter[0m[1;33m([0m[0mtdata[0m[1;33m,[0m [0mCAdata[0m[1;33m,[0m [0medgecolor[0m [1;33m=[0m [1;34m'black'[0m[1;33m,[0m [0mcolor[0m [1;33m=[0m [1;34m'none'[0m[1;33m,[0m [0mlabel[0m [1;33m=[0m [1;34m'CA'[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[1;32m---> 10[1;33m [0mplt[0m[1;33m.[0m[0mplot[0m[1;33m([0m[0mtsmooth[0m[1;33m,[0m [0mCMODTWO[0m[1;33m,[0m [0mcolor[0m [1;33m=[0m [1;34m'black'[0m[1;33m,[0m [0mlinestyle[0m [1;33m=[0m [1;34m'dashed'[0m[1;33m,[0m [0mlabel[0m [1;33m=[0m [1;34m'Second Order Model'[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m     11[0m [0mplt[0m[1;33m.[0m[0mxlabel[0m[1;33m([0m[1;34m'time (min)'[0m[1;33m,[0m [0mfontsize[0m [1;33m=[0m [1;36m12[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0;32m     12[0m [0mplt[0m[1;33m.[0m[0mylabel[0m[1;33m([0m[1;34m'CA (M)'[0m[1;33m,[0m [0mfontsize[0m [1;33m=[0m [1;36m12[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m

[1;32m~\anaconda3\lib\site-packages\matplotlib\pyplot.py[0m in [0;36mplot[1;34m(scalex, scaley, data, *args, **kwargs)[0m
[0;32m   2767[0m [1;33m@[0m[0m_copy_docstring_and_deprecators[0m[1;33m([0m[0mAxes[0m[1;33m.[0m[0mplot[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0;32m   2768[0m [1;32mdef[0m [0mplot[0m[1;33m([0m[1;33m*[0m[0margs[0m[1;33m,[0m [0mscalex[0m[1;33m=[0m[1;32mTrue[0m[1;33m,[0m [0mscaley[0m[1;33m=[0m[1;32mTrue[0m[1;33m,[0m [0mdata[0m[1;33m=[0m[1;32mNone[0m[1;33m,[0m [1;33m**[0m[0mkwargs[0m[1;33m)[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m
[1;32m-> 2769[1;33m     return gca().plot(
[0m[0;32m   2770[0m         [1;33m*[0m[0margs[0m[1;33m,[0m [0mscalex[0m[1;33m=[0m[0mscalex[0m[1;33m,[0m [0mscaley[0m[1;33m=[0m[0mscaley[0m[1;33m,[0m[1;33m[0m[1;33m[0m[0m
[0;32m   2771[0m         **({"data": data} if data is not None else {}), **kwargs)

[1;32m~\anaconda3\lib\site-packages\matplotlib\axes\_axes.py[0m in [0;36mplot[1;34m(self, scalex, scaley, data, *args, **kwargs)[0m
[0;32m   1630[0m         """
[0;32m   1631[0m         [0mkwargs[0m [1;33m=[0m [0mcbook[0m[1;33m.[0m[0mnormalize_kwargs[0m[1;33m([0m[0mkwargs[0m[1;33m,[0m [0mmlines[0m[1;33m.[0m[0mLine2D[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[1;32m-> 1632[1;33m         [0mlines[0m [1;33m=[0m [1;33m[[0m[1;33m*[0m[0mself[0m[1;33m.[0m[0m_get_lines[0m[1;33m([0m[1;33m*[0m[0margs[0m[1;33m,[0m [0mdata[0m[1;33m=[0m[0mdata[0m[1;33m,[0m [1;33m**[0m[0mkwargs[0m[1;33m)[0m[1;33m][0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m   1633[0m         [1;32mfor[0m [0mline[0m [1;32min[0m [0mlines[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m
[0;32m   1634[0m             [0mself[0m[1;33m.[0m[0madd_line[0m[1;33m([0m[0mline[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m

[1;32m~\anaconda3\lib\site-packages\matplotlib\axes\_base.py[0m in [0;36m__call__[1;34m(self, data, *args, **kwargs)[0m
[0;32m    310[0m                 [0mthis[0m [1;33m+=[0m [0margs[0m[1;33m[[0m[1;36m0[0m[1;33m][0m[1;33m,[0m[1;33m[0m[1;33m[0m[0m
[0;32m    311[0m                 [0margs[0m [1;33m=[0m [0margs[0m[1;33m[[0m[1;36m1[0m[1;33m:[0m[1;33m][0m[1;33m[0m[1;33m[0m[0m
[1;32m--> 312[1;33m             [1;32myield[0m [1;32mfrom[0m [0mself[0m[1;33m.[0m[0m_plot_args[0m[1;33m([0m[0mthis[0m[1;33m,[0m [0mkwargs[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m    313[0m [1;33m[0m[0m
[0;32m    314[0m     [1;32mdef[0m [0mget_next_color[0m[1;33m([0m[0mself[0m[1;33m)[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m

[1;32m~\anaconda3\lib\site-packages\matplotlib\axes\_base.py[0m in [0;36m_plot_args[1;34m(self, tup, kwargs, return_kwargs)[0m
[0;32m    496[0m [1;33m[0m[0m
[0;32m    497[0m         [1;32mif[0m [0mx[0m[1;33m.[0m[0mshape[0m[1;33m[[0m[1;36m0[0m[1;33m][0m [1;33m!=[0m [0my[0m[1;33m.[0m[0mshape[0m[1;33m[[0m[1;36m0[0m[1;33m][0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m
[1;32m--> 498[1;33m             raise ValueError(f"x and y must have same first dimension, but "
[0m[0;32m    499[0m                              f"have shapes {x.shape} and {y.shape}")
[0;32m    500[0m         [1;32mif[0m [0mx[0m[1;33m.[0m[0mndim[0m [1;33m>[0m [1;36m2[0m [1;32mor[0m [0my[0m[1;33m.[0m[0mndim[0m [1;33m>[0m [1;36m2[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m

[1;31mValueError[0m: x and y must have same first dimension, but have shapes (100,) and (20,)
ValueError: x and y must have same first dimension, but have shapes (100,) and (20,)

